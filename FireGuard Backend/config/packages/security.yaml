security:
  # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
  password_hashers:
    Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: "auto"
  # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
  providers:
    user_provider:
      entity: { class: App\Entity\User }
    fire_brigade_provider:
      entity: { class: App\Entity\FireBrigade, property: "email" }
  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false
    api_admin_login:
      pattern: ^/api/admin/login
      stateless: true
      json_login:
        provider: user_provider
        check_path: /api/admin/login
        success_handler: lexik_jwt_authentication.handler.authentication_success
        failure_handler: lexik_jwt_authentication.handler.authentication_failure
      user_checker: App\Security\AdminChecker
    api_fire_brigade_provider_login:
        pattern: ^/api/mobile/login
        stateless: true
        json_login:
          provider: fire_brigade_provider
          check_path: /api/mobile/login
          success_handler: lexik_jwt_authentication.handler.authentication_success
          failure_handler: lexik_jwt_authentication.handler.authentication_failure
    user_fire_api:
      pattern: ^/api/mobile/fire-brigade
      stateless: true
      entry_point: jwt
      provider: fire_brigade_provider
      jwt: ~
    api:
      pattern: ^/api
      stateless: true
      entry_point: jwt
      provider: user_provider
      jwt: ~
      refresh_jwt:
        check_path: /api/admin/token/refresh # or, you may use the `api_refresh_token` route name

      #    main:
      #      lazy: true
      #      provider: users_in_memory

      # activate different ways to authenticate
      # https://symfony.com/doc/current/security.html#the-firewall

      # https://symfony.com/doc/current/security/impersonating_user.html
      # switch_user: true

  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used
  access_control:
    - { path: ^/api/doc, roles: PUBLIC_ACCESS }
    - { path: ^/api/options, roles: PUBLIC_ACCESS }
    - { path: ^/api/admin, roles: IS_AUTHENTICATED_FULLY }
    - { path: ^/api/admin/token/refresh, roles: PUBLIC_ACCESS }
    - { path: ^/api/mobile/(login), roles: PUBLIC_ACCESS }
    - { path: ^/api/mobile, roles: IS_AUTHENTICATED_FULLY }

when@test:
  security:
    password_hashers:
      # By default, password hashers are resource intensive and take time. This is
      # important to generate secure password hashes. In tests however, secure hashes
      # are not important, waste resources and increase test times. The following
      # reduces the work factor to the lowest possible values.
      Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
        algorithm: auto
        cost: 4 # Lowest possible value for bcrypt
        time_cost: 3 # Lowest possible value for argon
        memory_cost: 10 # Lowest possible value for argon
