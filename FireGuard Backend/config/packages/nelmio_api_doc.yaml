nelmio_api_doc:
  documentation:
    info:
      title: Fire Managment App
      description: Monitors and detects fires using gas, humidity, and temperature sensors.
      version: 3.2.1
    components:
      securitySchemes:
        Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT

      parameters:
        locale:
          name: x-locale
          in: header
          schema:
            type: string
            enum: [en, ar]
            default: en
          required: false
        page:
          name: page
          in: query
          example: 1
          description: Determine page number.
          schema:
            type: integer
            default: 1
        limit:
          name: limit
          in: query
          example: 10
          description: Determine number of items per page.
          schema:
            type: integer
            default: 10
            enum: [10, 20, 30, 40, 50]
        sort:
          name: sort
          in: query
          example: alias.attribute
          description: Sorting results by specified attribute.
          schema:
            type: string
        direction:
          name: direction
          in: query
          example: asc
          description: Specify sorting order.
          schema:
            type: string
            enum: [asc, desc]

      schemas:
        Login:
          type: "object"
          properties:
            email:
              type: "string"
            password:
              type: "string"
        Token:
          type: "object"
          properties:
            token:
              type: "string"

        UserForm:
          type: "object"
          properties:
            avatar:
              type: "file"
              format: "binary"
            email:
              type: "string"
              example: "super@super.com"
            fullName:
              type: "string"
              example: "super man"
            phoneNumber:
              type: "integer"
              example: "1239821903"
            gender:
              type: "string"
              enum: ["MALE", "FEMALE"]
              example: "MALE"
            password:
              type: "string"
              example: "Aa198789798*"
            dateOfBirth:
              type: "string"
              example: "01/01/2022"
            rolesGroups[]:
              type: "array"
              items:
                type: "integer"
              example: [1]

        UpdateUserForm:
          type: "object"
          properties:
            avatar:
              type: "file"
              format: "binary"
            email:
              type: "string"
              example: "super@super.com"
            fullName:
              type: "string"
              example: "super man"
            phoneNumber:
              type: "integer"
              example: "1239821903"
            gender:
              type: "string"
              enum: ["MALE", "FEMALE"]
              example: "MALE"
            password:
              type: "string"
              example: "Aa198789798*"
            dateOfBirth:
              type: "string"
              example: "01/01/2022"
            rolesGroups[]:
              type: "array"
              items:
                type: "integer"
              example: [1]

        UpdateProfileForm:
          type: "object"
          properties:
            avatar:
              type: "file"
              format: "binary"
            email:
              type: "string"
              example: "super@super.com"
            fullName:
              type: "string"
              example: "super man"
            address:
              type: "string"
              example: "white bridge"
            phoneNumber:
              type: "integer"
              example: "1239821903"
            gender:
              type: "string"
              enum: ["MALE", "FEMALE"]
              example: "MALE"
            password:
              type: "string"
              example: "Aa198789798*"
            dateOfBirth:
              type: "string"
              example: "01/01/2022"

    security:
      - Bearer: []

    paths:
      /api/mobile/login:
        post:
          tags:
            - Auth Mobile
          summary: Login Mobile
          description: Login Mobile
          requestBody:
            description: Login Mobile
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Login"
                example:
                  { "username": "test@test.com", "password": "Test@123" }
          responses:
            200:
              description: successful operation
              content:
                application/json:
                  schema:
                    type: object
                    properties:
                      token:
                        type: string
                        example: "your_access_token"
                      refreshToken:
                        type: string
                        example: "your_refresh_token"

      /api/admin/login:
        post:
          tags:
            - Auth
          summary: Login Admin
          description: Login Admin
          requestBody:
            description: Login Admin
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Login"
                example:
                  { "username": "admin@admin.com", "password": "test123" }
          responses:
            200:
              description: successful operation
              content:
                application/json:
                  schema:
                    type: object
                    properties:
                      token:
                        type: string
                        example: "your_access_token"
                      refreshToken:
                        type: string
                        example: "your_refresh_token"

      /api/admin/token/refresh:
        post:
          tags:
            - Auth
          summary: Refresh Access Token
          description: Refresh the access token using the refresh token.
          requestBody:
            description: Refresh Token object
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Login"
                example: { "refreshToken": "your_refresh_token_here" }
          responses:
            200:
              description: Access Token Refreshed Successfully
              content:
                application/json:
                  schema:
                    type: object
                    properties:
                      token:
                        type: string
                        example: "your_access_token"
                      refreshToken:
                        type: string
                        example: "your_refresh_token"

  areas: # to filter documented areas
    path_patterns:
      - ^/api(?!/doc$) # Accepts routes under /api except /api/doc
